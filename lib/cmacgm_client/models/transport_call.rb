=begin
#Logistic Tracking service API - DCSA OpenAPI specification for Track & Trace v2.2.0

#Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track &amp; Trace (T&amp;T). API specification issued by DCSA.org.  <i>Please note that shipment events and subscription management are not covered yet by CMA CGM API.</i>  <br> This API is accessible through <ul> <li> <b> Public </b> connection (authentication with API Key): this allows to retrieve standard equipment moves (e.g. ready to be loaded, discharged), Transhipment moves (e.g. discharged and re-loaded onboard) and planned vessel departure and arrival dates. </li> <li> <b> Private </b> connection (authentication with Oauth2 client credentials): this allows to retrieve additional private events such as actual rail and ramp moves, planned departure and arrival dates for inland moves. These private events are available only if you (or your end customer) are identified on the booking as: Booking Party, Deciding Party, Consignee, Notifier or Shipper. </li> </ul> </br> For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'>Information Model v3.3</a> Polling can be done on the <b>GET /events</b> endPoint. DCSA version 2.2.0

The version of the OpenAPI document: 2.2.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module CMACGMClient
  class TransportCall
    # The unique identifier for a transport call
    attr_accessor :transport_call_id

    # The code of the service for which the schedule details are published.
    attr_accessor :carrier_service_code

    # The vessel operator-specific identifier of the Voyage. In case there are multiple voyages the export voyage is chosen.
    attr_accessor :carrier_voyage_number

    # The vessel operator-specific identifier of the export Voyage.
    attr_accessor :export_voyage_number

    # The vessel operator-specific identifier of the import Voyage.
    attr_accessor :import_voyage_number

    # Transport operator&apos;s key that uniquely identifies each individual call. This key is essential to distinguish between two separate calls at the same location within one voyage.
    attr_accessor :transport_call_sequence_number

    # The UN Location code specifying where the place is located.
    attr_accessor :un_location_code

    # The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.
    attr_accessor :facility_code

    attr_accessor :facility_code_list_provider

    attr_accessor :facility_type_code

    # An alternative way to capture the facility when no standardized DCSA facility code can be found.
    attr_accessor :other_facility

    attr_accessor :mode_of_transport

    attr_accessor :location

    attr_accessor :vessel

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'transport_call_id' => :'transportCallID',
        :'carrier_service_code' => :'carrierServiceCode',
        :'carrier_voyage_number' => :'carrierVoyageNumber',
        :'export_voyage_number' => :'exportVoyageNumber',
        :'import_voyage_number' => :'importVoyageNumber',
        :'transport_call_sequence_number' => :'transportCallSequenceNumber',
        :'un_location_code' => :'UNLocationCode',
        :'facility_code' => :'facilityCode',
        :'facility_code_list_provider' => :'facilityCodeListProvider',
        :'facility_type_code' => :'facilityTypeCode',
        :'other_facility' => :'otherFacility',
        :'mode_of_transport' => :'modeOfTransport',
        :'location' => :'location',
        :'vessel' => :'vessel'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'transport_call_id' => :'String',
        :'carrier_service_code' => :'String',
        :'carrier_voyage_number' => :'Object',
        :'export_voyage_number' => :'String',
        :'import_voyage_number' => :'String',
        :'transport_call_sequence_number' => :'Integer',
        :'un_location_code' => :'String',
        :'facility_code' => :'String',
        :'facility_code_list_provider' => :'FacilityCodeListProvider',
        :'facility_type_code' => :'FacilityTypeCodeTRN',
        :'other_facility' => :'String',
        :'mode_of_transport' => :'ModeOfTransport',
        :'location' => :'TransportCallAllOfLocation',
        :'vessel' => :'Vessel'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'carrier_voyage_number',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CMACGMClient::TransportCall` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CMACGMClient::TransportCall`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'transport_call_id')
        self.transport_call_id = attributes[:'transport_call_id']
      else
        self.transport_call_id = nil
      end

      if attributes.key?(:'carrier_service_code')
        self.carrier_service_code = attributes[:'carrier_service_code']
      end

      if attributes.key?(:'carrier_voyage_number')
        self.carrier_voyage_number = attributes[:'carrier_voyage_number']
      end

      if attributes.key?(:'export_voyage_number')
        self.export_voyage_number = attributes[:'export_voyage_number']
      end

      if attributes.key?(:'import_voyage_number')
        self.import_voyage_number = attributes[:'import_voyage_number']
      end

      if attributes.key?(:'transport_call_sequence_number')
        self.transport_call_sequence_number = attributes[:'transport_call_sequence_number']
      end

      if attributes.key?(:'un_location_code')
        self.un_location_code = attributes[:'un_location_code']
      end

      if attributes.key?(:'facility_code')
        self.facility_code = attributes[:'facility_code']
      end

      if attributes.key?(:'facility_code_list_provider')
        self.facility_code_list_provider = attributes[:'facility_code_list_provider']
      end

      if attributes.key?(:'facility_type_code')
        self.facility_type_code = attributes[:'facility_type_code']
      end

      if attributes.key?(:'other_facility')
        self.other_facility = attributes[:'other_facility']
      end

      if attributes.key?(:'mode_of_transport')
        self.mode_of_transport = attributes[:'mode_of_transport']
      else
        self.mode_of_transport = nil
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'vessel')
        self.vessel = attributes[:'vessel']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @transport_call_id.nil?
        invalid_properties.push('invalid value for "transport_call_id", transport_call_id cannot be nil.')
      end

      if @transport_call_id.to_s.length > 100
        invalid_properties.push('invalid value for "transport_call_id", the character length must be smaller than or equal to 100.')
      end

      if !@carrier_service_code.nil? && @carrier_service_code.to_s.length > 5
        invalid_properties.push('invalid value for "carrier_service_code", the character length must be smaller than or equal to 5.')
      end

      if !@export_voyage_number.nil? && @export_voyage_number.to_s.length > 50
        invalid_properties.push('invalid value for "export_voyage_number", the character length must be smaller than or equal to 50.')
      end

      if !@import_voyage_number.nil? && @import_voyage_number.to_s.length > 50
        invalid_properties.push('invalid value for "import_voyage_number", the character length must be smaller than or equal to 50.')
      end

      if !@un_location_code.nil? && @un_location_code.to_s.length > 5
        invalid_properties.push('invalid value for "un_location_code", the character length must be smaller than or equal to 5.')
      end

      if !@facility_code.nil? && @facility_code.to_s.length > 6
        invalid_properties.push('invalid value for "facility_code", the character length must be smaller than or equal to 6.')
      end

      if !@other_facility.nil? && @other_facility.to_s.length > 50
        invalid_properties.push('invalid value for "other_facility", the character length must be smaller than or equal to 50.')
      end

      if @mode_of_transport.nil?
        invalid_properties.push('invalid value for "mode_of_transport", mode_of_transport cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @transport_call_id.nil?
      return false if @transport_call_id.to_s.length > 100
      return false if !@carrier_service_code.nil? && @carrier_service_code.to_s.length > 5
      return false if !@export_voyage_number.nil? && @export_voyage_number.to_s.length > 50
      return false if !@import_voyage_number.nil? && @import_voyage_number.to_s.length > 50
      return false if !@un_location_code.nil? && @un_location_code.to_s.length > 5
      return false if !@facility_code.nil? && @facility_code.to_s.length > 6
      return false if !@other_facility.nil? && @other_facility.to_s.length > 50
      return false if @mode_of_transport.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] transport_call_id Value to be assigned
    def transport_call_id=(transport_call_id)
      if transport_call_id.nil?
        fail ArgumentError, 'transport_call_id cannot be nil'
      end

      if transport_call_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "transport_call_id", the character length must be smaller than or equal to 100.'
      end

      @transport_call_id = transport_call_id
    end

    # Custom attribute writer method with validation
    # @param [Object] carrier_service_code Value to be assigned
    def carrier_service_code=(carrier_service_code)
      if carrier_service_code.nil?
        fail ArgumentError, 'carrier_service_code cannot be nil'
      end

      if carrier_service_code.to_s.length > 5
        fail ArgumentError, 'invalid value for "carrier_service_code", the character length must be smaller than or equal to 5.'
      end

      @carrier_service_code = carrier_service_code
    end

    # Custom attribute writer method with validation
    # @param [Object] export_voyage_number Value to be assigned
    def export_voyage_number=(export_voyage_number)
      if export_voyage_number.nil?
        fail ArgumentError, 'export_voyage_number cannot be nil'
      end

      if export_voyage_number.to_s.length > 50
        fail ArgumentError, 'invalid value for "export_voyage_number", the character length must be smaller than or equal to 50.'
      end

      @export_voyage_number = export_voyage_number
    end

    # Custom attribute writer method with validation
    # @param [Object] import_voyage_number Value to be assigned
    def import_voyage_number=(import_voyage_number)
      if import_voyage_number.nil?
        fail ArgumentError, 'import_voyage_number cannot be nil'
      end

      if import_voyage_number.to_s.length > 50
        fail ArgumentError, 'invalid value for "import_voyage_number", the character length must be smaller than or equal to 50.'
      end

      @import_voyage_number = import_voyage_number
    end

    # Custom attribute writer method with validation
    # @param [Object] un_location_code Value to be assigned
    def un_location_code=(un_location_code)
      if un_location_code.nil?
        fail ArgumentError, 'un_location_code cannot be nil'
      end

      if un_location_code.to_s.length > 5
        fail ArgumentError, 'invalid value for "un_location_code", the character length must be smaller than or equal to 5.'
      end

      @un_location_code = un_location_code
    end

    # Custom attribute writer method with validation
    # @param [Object] facility_code Value to be assigned
    def facility_code=(facility_code)
      if facility_code.nil?
        fail ArgumentError, 'facility_code cannot be nil'
      end

      if facility_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "facility_code", the character length must be smaller than or equal to 6.'
      end

      @facility_code = facility_code
    end

    # Custom attribute writer method with validation
    # @param [Object] other_facility Value to be assigned
    def other_facility=(other_facility)
      if other_facility.nil?
        fail ArgumentError, 'other_facility cannot be nil'
      end

      if other_facility.to_s.length > 50
        fail ArgumentError, 'invalid value for "other_facility", the character length must be smaller than or equal to 50.'
      end

      @other_facility = other_facility
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          transport_call_id == o.transport_call_id &&
          carrier_service_code == o.carrier_service_code &&
          carrier_voyage_number == o.carrier_voyage_number &&
          export_voyage_number == o.export_voyage_number &&
          import_voyage_number == o.import_voyage_number &&
          transport_call_sequence_number == o.transport_call_sequence_number &&
          un_location_code == o.un_location_code &&
          facility_code == o.facility_code &&
          facility_code_list_provider == o.facility_code_list_provider &&
          facility_type_code == o.facility_type_code &&
          other_facility == o.other_facility &&
          mode_of_transport == o.mode_of_transport &&
          location == o.location &&
          vessel == o.vessel
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [transport_call_id, carrier_service_code, carrier_voyage_number, export_voyage_number, import_voyage_number, transport_call_sequence_number, un_location_code, facility_code, facility_code_list_provider, facility_type_code, other_facility, mode_of_transport, location, vessel].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CMACGMClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
