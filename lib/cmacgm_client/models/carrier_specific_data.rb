=begin
#Logistic Tracking service API - DCSA OpenAPI specification for Track & Trace v2.2.0

#Managing and sending Shipment-, Transport- and Equipment-events and subscriptions for Track &amp; Trace (T&amp;T). API specification issued by DCSA.org.  <i>Please note that shipment events and subscription management are not covered yet by CMA CGM API.</i>  <br> This API is accessible through <ul> <li> <b> Public </b> connection (authentication with API Key): this allows to retrieve standard equipment moves (e.g. ready to be loaded, discharged), Transhipment moves (e.g. discharged and re-loaded onboard) and planned vessel departure and arrival dates. </li> <li> <b> Private </b> connection (authentication with Oauth2 client credentials): this allows to retrieve additional private events such as actual rail and ramp moves, planned departure and arrival dates for inland moves. These private events are available only if you (or your end customer) are identified on the booking as: Booking Party, Deciding Party, Consignee, Notifier or Shipper. </li> </ul> </br> For explanation to specific values or objects please refer to the <a href='https://dcsa.org/wp-content/uploads/2021/10/202108_DCSA_P1_Information-Model-v3.3_TNT22_Final.pdf'>Information Model v3.3</a> Polling can be done on the <b>GET /events</b> endPoint. DCSA version 2.2.0

The version of the OpenAPI document: 2.2.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module CMACGMClient
  class CarrierSpecificData
    # CMA internal event Code
    attr_accessor :internal_event_code

    # CMA internal event Label
    attr_accessor :internal_event_label

    # CMA internal location Code
    attr_accessor :internal_location_code

    # CMA internal facility Code
    attr_accessor :internal_facility_code

    # Carrier export voyage reference defined on Booking
    attr_accessor :booking_export_voyage_reference

    # The Transportation phase, Export, Transshipent or Import
    attr_accessor :transportation_phase

    # The location type for the shipment
    attr_accessor :shipment_location_type

    # The total number of sequence provided in transportation plan
    attr_accessor :transport_call_sequence_total

    # The total number equipment units concerned by the message
    attr_accessor :number_of_units

    attr_accessor :customs_references

    # The identifier for a shipment
    attr_accessor :origin_booking_reference

    attr_accessor :split_to_booking_references

    # The identifier for a shipment
    attr_accessor :merge_to_booking_reference

    # The identifier for a shipment
    attr_accessor :master_part_load_booking_reference

    attr_accessor :part_load_group_booking_references

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'internal_event_code' => :'internalEventCode',
        :'internal_event_label' => :'internalEventLabel',
        :'internal_location_code' => :'internalLocationCode',
        :'internal_facility_code' => :'internalFacilityCode',
        :'booking_export_voyage_reference' => :'bookingExportVoyageReference',
        :'transportation_phase' => :'transportationPhase',
        :'shipment_location_type' => :'shipmentLocationType',
        :'transport_call_sequence_total' => :'transportCallSequenceTotal',
        :'number_of_units' => :'numberOfUnits',
        :'customs_references' => :'customsReferences',
        :'origin_booking_reference' => :'originBookingReference',
        :'split_to_booking_references' => :'splitToBookingReferences',
        :'merge_to_booking_reference' => :'mergeToBookingReference',
        :'master_part_load_booking_reference' => :'masterPartLoadBookingReference',
        :'part_load_group_booking_references' => :'partLoadGroupBookingReferences'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'internal_event_code' => :'String',
        :'internal_event_label' => :'String',
        :'internal_location_code' => :'String',
        :'internal_facility_code' => :'String',
        :'booking_export_voyage_reference' => :'String',
        :'transportation_phase' => :'String',
        :'shipment_location_type' => :'String',
        :'transport_call_sequence_total' => :'Integer',
        :'number_of_units' => :'Integer',
        :'customs_references' => :'Array<CustomsReferences>',
        :'origin_booking_reference' => :'String',
        :'split_to_booking_references' => :'Array<String>',
        :'merge_to_booking_reference' => :'String',
        :'master_part_load_booking_reference' => :'String',
        :'part_load_group_booking_references' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CMACGMClient::CarrierSpecificData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CMACGMClient::CarrierSpecificData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'internal_event_code')
        self.internal_event_code = attributes[:'internal_event_code']
      end

      if attributes.key?(:'internal_event_label')
        self.internal_event_label = attributes[:'internal_event_label']
      end

      if attributes.key?(:'internal_location_code')
        self.internal_location_code = attributes[:'internal_location_code']
      end

      if attributes.key?(:'internal_facility_code')
        self.internal_facility_code = attributes[:'internal_facility_code']
      end

      if attributes.key?(:'booking_export_voyage_reference')
        self.booking_export_voyage_reference = attributes[:'booking_export_voyage_reference']
      end

      if attributes.key?(:'transportation_phase')
        self.transportation_phase = attributes[:'transportation_phase']
      end

      if attributes.key?(:'shipment_location_type')
        self.shipment_location_type = attributes[:'shipment_location_type']
      end

      if attributes.key?(:'transport_call_sequence_total')
        self.transport_call_sequence_total = attributes[:'transport_call_sequence_total']
      end

      if attributes.key?(:'number_of_units')
        self.number_of_units = attributes[:'number_of_units']
      end

      if attributes.key?(:'customs_references')
        if (value = attributes[:'customs_references']).is_a?(Array)
          self.customs_references = value
        end
      end

      if attributes.key?(:'origin_booking_reference')
        self.origin_booking_reference = attributes[:'origin_booking_reference']
      end

      if attributes.key?(:'split_to_booking_references')
        if (value = attributes[:'split_to_booking_references']).is_a?(Array)
          self.split_to_booking_references = value
        end
      end

      if attributes.key?(:'merge_to_booking_reference')
        self.merge_to_booking_reference = attributes[:'merge_to_booking_reference']
      end

      if attributes.key?(:'master_part_load_booking_reference')
        self.master_part_load_booking_reference = attributes[:'master_part_load_booking_reference']
      end

      if attributes.key?(:'part_load_group_booking_references')
        if (value = attributes[:'part_load_group_booking_references']).is_a?(Array)
          self.part_load_group_booking_references = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          internal_event_code == o.internal_event_code &&
          internal_event_label == o.internal_event_label &&
          internal_location_code == o.internal_location_code &&
          internal_facility_code == o.internal_facility_code &&
          booking_export_voyage_reference == o.booking_export_voyage_reference &&
          transportation_phase == o.transportation_phase &&
          shipment_location_type == o.shipment_location_type &&
          transport_call_sequence_total == o.transport_call_sequence_total &&
          number_of_units == o.number_of_units &&
          customs_references == o.customs_references &&
          origin_booking_reference == o.origin_booking_reference &&
          split_to_booking_references == o.split_to_booking_references &&
          merge_to_booking_reference == o.merge_to_booking_reference &&
          master_part_load_booking_reference == o.master_part_load_booking_reference &&
          part_load_group_booking_references == o.part_load_group_booking_references
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [internal_event_code, internal_event_label, internal_location_code, internal_facility_code, booking_export_voyage_reference, transportation_phase, shipment_location_type, transport_call_sequence_total, number_of_units, customs_references, origin_booking_reference, split_to_booking_references, merge_to_booking_reference, master_part_load_booking_reference, part_load_group_booking_references].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CMACGMClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
